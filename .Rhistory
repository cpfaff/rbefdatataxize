require(slidify)
publish_github()
publish_github("cpfaff", "befworkflow")
publish("cpfaff", "befworkflow")
publish()
publish("cpfaff", "befworkflow")
publish("cpfaff", "befworkflow")
publish("cpfaff", "befworkflow")
publish_github("cpfaff", "befworkflow")
publish_github("cpfaff", "befworkflow")
query_response_need_attention = uique(subset(query_response, score < 1))
```
require(slidify)
require(rbefdata)
bef.options()
bef.options(url = "http://stage.china.befdata.biow.uni-leipzig.de")
bef.options(user_credentials = "BCeqHdtGA7v2MHd15l")
species_list = c("Helianthus annuus", "Pinus contort")
query_response = tnrs(query = species_list)[, -c(6:7)]
require(taxize)
species_list = c("Helianthus annuus", "Pinus contort")
query_response = tnrs(query = species_list)[, -c(6:7)]
query_response
datasets = bef.portal.get.datasets_for_proposal(id = 1)
length(datasets)
titles = sapply(datasets, function(x) attributes(x)$title)
titles
dataset = datasets[[2]]
titles
dataset = datasets[[2]]
require(gdata)
species = trim(dataset$species)
unique_species = unique(as.character(species))
head(unique_species, 7)
query_response = tnrs(query = unique_species)[, -c(6:7)]
head(query_response,9)[c("submittedName", "acceptedName", "score")]
query_response_need_attention = unique(subset(query_response, score < 1))
query_response_need_attention
query_response_need_attention = subset(query_response_need_attention, score > 0.5)
query_response_need_attention
dataset
corrected_dataset = merge(dataset, query_response_need_attention[c("submittedName", "acceptedName")],
by.x = "species",
by.y = "submittedName", all.x = T)
corrected_dataset
query_response_need_attention
base = corrected_dataset$acceptedName
mergein = as.character(species)
base = corrected_dataset$acceptedName
base
merged_names = merge_em(base_vec = base, merge_vec = mergein)
merge_em <- function(base_vec, merge_vec) {
output = vector()
for(i in 1:length(base_vec)) {
if(is.na(base_vec[i])) {
output[i] = merge_vec[i]
} else {
output[i] = base_vec[i]
}
}
return(output)
}
merged_names = merge_em(base_vec = base, merge_vec = mergein)
corrected_dataset = data.frame(dataset, species_corrected = merged_names)
head(corrected_dataset, 15)
require(slidify)
source('~/.active-rstudio-document', echo=TRUE)
corrected_dataset
new = base[is.na(base)] <- mergein[is.na(base)]
all(new==merged_names)
all(new==merged_names)
length(new)
length(merged_names)
length(base)
require(slidify)
remove.packages("taxize")
# install.packages("devtools")
require(devtools)
# install_github(username = "befdata", repo = "rbefdata", subdir = "rbefdata")
require(rbefdata)
devtools::install_github(c("sckott/XMLSchema", "sckott/SSOAP"))
devtools::install_github("taxize", "ropensci")
library('taxize')
require(taxize)
# install.packages("gdata")
require(gdata)
# set options
options("width"=155)
install.packages("devtools")
install.packages("devtools")
install.packages("gdata")
install.packages("gdata")
require(rbefdata)
bef.options()
bef.options(user_credentials = "y9H5uaC65fr1qCNdk0H1")
datasets = bef.portal.get.datasets_for_proposal(id = 1)
length(datasets)
titles = sapply(datasets, function(x) attributes(x)$title)
titles
dataset = datasets[[2]]
datasets = bef.portal.get.datasets_for_proposal(id = 1)
require(rbefdata)
datasets = bef.portal.get.datasets.for_proposal(id = 1)
bef.options(user_credentials = "y9H5uaC65fr1qCNdk0H1")
bef.portal.get.datasets.for_proposal(id=1)
bef.options()
bef.options(url = "http://stage.china.befdata.biow.uni-leipzig.de")
datasets = bef.portal.get.datasets.for_proposal(id = 1)
length(datasets)
titles = sapply(datasets, function(x) attributes(x)$title)
titles
dataset = datasets[[1]]
attributes(dataset)$title
names(attributes(dataset))
attributes(dataset)$column$description
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
dataset = datasets[[1]]
dataset
attributes(dataset)$title
names(attributes(dataset))
names(dataset)
attributes(dataset)$column$description
* About the spces column and their description
require(gdata)
species = trim(dataset$species)
unique_species = unique(as.character(species))
head(unique_species, 7)
require(taxize)
species_list = c("Helianthus annuus", "Pinus contort")
query_response = tnrs(query = species_list)[, -c(6:7)]
query_response
query_response = tnrs(query = species_list, source = "iPlant_TNRS")[, -c(6:7)]
query_response
query_response = tnrs(query = unique_species)[, -c(6:7)]
query_response_need_attention = unique(subset(query_response, score < 1))
query_response_need_attention
query_response_need_attention = subset(query_response_need_attention, score > 0.5)
query_response_need_attention
corrected_dataset = merge(dataset, query_response_need_attention[c("submittedName", "acceptedName")],
by.x = "species",
by.y = "submittedName", all.x = T)
head(corrected_dataset)
corrected_dataset = merge(dataset, query_response_need_attention[c("submittedname", "acceptedname")],
by.x = "species",
by.y = "submittedname", all.x = T)
head(corrected_dataset)
merge_em <- function(base_vec, merge_vec) {
output = vector()
for(i in 1:length(base_vec)) {
if(is.na(base_vec[i])) {
output[i] = merge_vec[i]
} else {
output[i] = base_vec[i]
}
}
return(output)
}
base = corrected_dataset$acceptedName
mergein = as.character(species)
new = base[is.na(base)] <- mergein[is.na(base)]
base = corrected_dataset$acceptedname
mergein = as.character(species)
new = base[is.na(base)] <- mergein[is.na(base)]
new
merged_names = merge_em(base_vec = base, merge_vec = mergein)
corrected_dataset = data.frame(dataset, species_corrected = merged_names)
head(corrected_dataset, 15)
title = "Dataset with errors in tree species (corrected)"
bef.portal.upload.dataset(dataset = corrected_dataset, dataset_title = title)
species_examples = c("Homo sapiens", "Rattus rattus")
classification_list = classification(species_examples, db = "itis")
classification_list[[1]]
tax_name(query = "Homo Sapiens", get = "genus", db = "ncbi")
tax_name(query = species_examples, get = "family", db = "ncbi")
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"Rank" == "order")}$"ScientificName")
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"Rank" == "order")}$"ScientificName")
classification_species = classification(species_list, db = "ncbi")
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"Rank" == "order")}$"ScientificName")
extraction_ncbi_family = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"Rank" == "family")}$"ScientificName")
extraction_ncbi_genus = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"Rank" == "genus")}$"ScientificName")
extraction_ncbi_order_fam_genus = cbind(extraction_ncbi_order, extraction_ncbi_family, extraction_ncbi_genus)
species_taxonic = data.frame(species = species_list, extraction_ncbi_order_fam_genus)
head(species_taxonic, 5)
extraction_ncbi_order
species_list = unique(as.character(corrected_dataset$species_corrected))
classification_species = classification(species_list, db = "ncbi")
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"Rank" == "order")}$"ScientificName")
extraction_ncbi_order
classification_species
classification_species
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"rank" == "order")}$"ScientificName")
extraction_ncbi_order
classification_species
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"rank" == "order")}$"name")
extraction_ncbi_order
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"rank" == "order")}$"name")
extraction_ncbi_family = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"rank" == "family")}$"name")
extraction_ncbi_family
extraction_ncbi_genus = sapply(classification_species, function(x) if(length(x) != 3){NA}else{subset(x, x$"rank" == "genus")}$"name")
extraction_ncbi_genus
extraction_ncbi_order_fam_genus = cbind(extraction_ncbi_order, extraction_ncbi_family, extraction_ncbi_genus)
species_taxonic = data.frame(species = species_list, extraction_ncbi_order_fam_genus)
head(species_taxonic, 5)
head(species_taxonic, 50)
species_taxonic
classification_species
classification_species[[1]]
classification_species[1]
classification_species
classification_species[[1]]
class(classification_species)
lapply(classification_species, function(x) x)
lapply(classification_species, function(x) length(x))
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 2){NA}else{subset(x, x$"rank" == "order")}$"name")
extraction_ncbi_order
extraction_ncbi_order = sapply(classification_species, function(x) if(length(x) != 2){NA}else{subset(x, x$"rank" == "order")}$"name")
extraction_ncbi_family = sapply(classification_species, function(x) if(length(x) != 2){NA}else{subset(x, x$"rank" == "family")}$"name")
extraction_ncbi_genus = sapply(classification_species, function(x) if(length(x) != 2){NA}else{subset(x, x$"rank" == "genus")}$"name")
extraction_ncbi_order_fam_genus = cbind(extraction_ncbi_order, extraction_ncbi_family, extraction_ncbi_genus)
species_taxonic = data.frame(species = species_list, extraction_ncbi_order_fam_genus)
head(species_taxonic, 50)
extraction_ncbi_order_fam_genus = cbind(extraction_ncbi_order, extraction_ncbi_family, extraction_ncbi_genus)
species_taxonic = data.frame(species = species_list, extraction_ncbi_order_fam_genus)
head(species_taxonic, 5)
require(slidify)
author(newdeck)
author("rbefdataAndBEFdataWithTaxize")
require(slidify)
query_response
extraction_ncbi_family = sapply(classification_species, function(x) {
if(length(x) != 2){NA}else{subset(x, x$"rank" == "family")}$"name" })
extraction_ncbi_order = sapply(classification_species, function(x) {
if(length(x) != 2){NA}else{subset(x, x$"rank" == "order")}$"name"
})
extraction_ncbi_order = sapply(classification_species, function(x) {
if(length(x) != 2){NA}else{subset(x, x$"rank" == "order")}$"name"
})
remove.packages("taxize")
